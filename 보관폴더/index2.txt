<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>도서 구매와 대여 정보를 한눈에</title>
  <style>
    /* 기존 스타일 유지 */
    body {
      font-family: sans-serif;
      padding: 2rem;
      background-color: #f5f5f5;
    }
    h1 {
      text-align: center;
    }
    .search-container {
      display: flex;
      justify-content: center;
      margin-bottom: 0.5rem;
    }
    #searchInput {
      width: 400px;
      padding: 10px;
      font-size: 16px;
    }
    #searchButton {
      padding: 10px 20px;
      font-size: 16px;
      margin-left: 10px;
      cursor: pointer;
    }
    .results {
     display: grid;
     grid-template-columns: repeat(4, 300px); /* 4개, 고정 너비 */
     gap: 20px; /* 카드 사이 간격 */
     justify-content: center; /* 가로 중앙 정렬 */
     padding: 20px 0; 
    }
    .book-card {
     width: 300px;  /* 또는 기존 사용하던 정확한 너비 */
     border: 1px solid #ccc;
     border-radius: 6px;
     padding: 6px;
     box-sizing: border-box;
     background: #fff;
    }
    .book-card img {
      width: 100%;
      max-height: 220px;
      object-fit: cover;
      border-radius: 6px;
    }
    .book-info {
      margin-top: 6px;
      line-height: 1.3;
    }
    .book-info h3 {
      margin: 3px 0;
      font-size: 15px;
    }
    .price {
      margin-top: 3px;
      font-size: 15px;
      font-weight: bold;
      color: #1a73e8;
    }
    .links a {
      display: inline-block;
      margin-top: 4px;
      color: #555;
      text-decoration: underline;
      font-size: 15px;
      cursor: pointer;
    }
    .dropdown-container {
      position: fixed;
      top: 185px;
      left: 325px;
      z-index: 999;
      display: none;
      flex-wrap: wrap;
      flex-direction: row;
      gap: 10px;
      background-color: #f9f9f9;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 0 8px rgba(0,0,0,0.1);
      align-items: center;
      max-width: 95vw;
      box-sizing: border-box;
    }
    
    .dropdown-container select {
      padding: 6px;
      font-size: 14px;
      min-width: 120px;
      flex: 1 1 auto;
      max-width: 100%;
    }
    .dropdown-container #checkLibraryBtn,
    .dropdown-container #closeDropdownBtn {
      padding: 6px 14px;
      font-size: 14px;
      cursor: pointer;
      background-color: #1a73e8;
      border: none;
      color: white;
      border-radius: 4px;
      white-space: nowrap;
      flex-shrink: 0;
    }
    .dropdown-container #closeDropdownBtn {
      background-color: orange;
    }

    .dropdown-container #checkLibraryBtn:disabled {
      background-color: #999;
      cursor: not-allowed;
    }
    #loadMoreBtn {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      background-color: #1a73e8;
      color: white;
      border: none;
      border-radius: 6px;
      user-select: none;
    }
    #loadMoreBtn:disabled {
      background-color: #999;
      cursor: not-allowed;
    }
    select option {
      color: black !important;
      font-size: 16px;
      opacity: 1 !important;
      background-color: white;
    }
    select:disabled {
      background-color: #f0f0f0;
    }

    /* ✅ 모달 스타일 추가 */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    .modal-content {
      background-color: #fff;      
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      position: absolute;
      top: 25%;
      left: 50%;
      transform: translateX(-50%);      
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
      box-sizing: border-box;
    }
    .modal-close {
      color: #aaa;
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    .modal-close:hover {
      color: black;
    }
    .site-title {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: clamp(32px, 5vw, 56px);
      max-width: 100%;
      text-align: center;
      margin: 0 auto;
      margin-bottom: 2rem
    }
    .results-wrapper {
      display: flex;
      justify-content: center;
    }
    .shop-link {
      font-size: 30px;  /* 또는 18px 등 원하는 크기 */
      font-weight: bold; /* 원하면 볼드도 추가 가능 */
      color: #333; /* 색상도 원하는 대로 */
    }
    .api-footer {
      width: 100%;
      background-color: #f0f0f0;
      padding: 5px 0;
      position: fixed;
      bottom: 0;
      left: 0;
      text-align: center;
      box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
      z-index: 1000;
    }
    .api-footer-content {
      display: flex;
      justify-content: center; /* 가운데 정렬 유지 */
      align-items: center;
      padding: 10px 20px;
      font-size: 14px;
      color: #444;
    }
    .api-provide {
      text-align: center;
      flex: 1; /* 영역을 넓게 잡아 가운데 정렬 유지 */
    }

    .api-footer-content span {
      font-weight: 600;
    }
    .footer-contact {
      position: absolute;
      right: 20px;
      font-size: 0.9rem;
      color: #666; /* 진하지 않은 회색 */    }

    .search-hint {
      text-align: center;
      font-size: 14px; /* 작게 */
      color: #888888; /* 연한 회색 */
      margin-top: 4px; /* 검색창과 약간의 간격 */
      margin-bottom: 16px; /* 아래 요소와 간격 */
      padding: 0 10px; /* 좌우 여유 — 모바일에서 줄바꿈 자연스럽게 */
      line-height: 1.4; /* 줄 간격 살짝 여유 */
      word-wrap: break-word; /* 긴 단어 줄바꿈 허용 */
    }
    .spinner {
      border: 8px solid #f3f3f3; /* 회색 테두리 */
      border-top: 8px solid #3498db; /* 파란색 테두리 */
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1s linear infinite;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 9999;
    }
    #backToTop {
      display: none; /* 처음엔 숨김 */
      position: fixed;
      bottom: 40px; /* 화면 아래쪽에서 40px */
      right: 40px;  /* 화면 오른쪽에서 40px */
      z-index: 999;
      font-size: 16px;
      border: none;
      outline: none;
      background-color: #1a73e8; /* 파란색 버튼 (원하면 다른 색으로 바꿀 수 있음) */
      color: white;
      cursor: pointer;
      padding: 12px 16px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.3);
    }
    #backToTop:hover {
      background-color: #0d47a1; /* 마우스 올렸을 때 색 변경 */
    }
    /* 반응형 스타일 */
    @media (max-width: 768px) {
    .header h1 {
        font-size: 18px;
    }
    .search-box {
        flex-direction: column;
        align-items: stretch;
    }
    .search-box input[type="text"] {
        width: 100%;
    }
    .search-box button {
        width: 100%;
    }
    .book-cover {
        max-width: 80px;
    }
    .book-table th,
    .book-table td {
        font-size: 14px;
        padding: 8px;
    }
    }
    @media (max-width: 480px) {
    .modal-content {
       width: 95%;
       padding: 16px;
       font-size: 14px;
    }
    }
    @media screen and (max-width: 1024px) {
    .results {
    grid-template-columns: repeat(2, 300px); /* 태블릿: 2개 */
    }
    #searchInput {
      height: 36px;       /* 기본보다 작게, 필요하면 더 조절 가능 */
      padding: 6px 10px;
      font-size: 14px;    /* 폰트 크기도 살짝 줄임 */
      box-sizing: border-box;
    }

    /* 검색 버튼 높이 맞추기 */
    #searchButton {
      height: 36px;
      font-size: 14px;
      white-space: nowrap; /* 텍스트 줄바꿈 방지 */
      display: flex;       /* 텍스트 세로 중앙 정렬을 위한 flex */
      align-items: center; /* 수직 가운데 정렬 */
      justify-content: center; /* 가로 가운데 정렬 */
      padding: 0 12px;     /* 좌우 여백 적당히 유지 */
    }
    }

    @media screen and (max-width: 600px) {
      .results {
        grid-template-columns: repeat(1, 300px); /* 모바일: 1개 */
    }
    #searchInput {
      height: 36px;       /* 기본보다 작게, 필요하면 더 조절 가능 */
      padding: 6px 10px;
      font-size: 14px;    /* 폰트 크기도 살짝 줄임 */
      box-sizing: border-box;
    }

    /* 검색 버튼 높이 맞추기 */
    #searchButton {
      height: 36px;
      font-size: 14px;
      white-space: nowrap; /* 텍스트 줄바꿈 방지 */
      display: flex;       /* 텍스트 세로 중앙 정렬을 위한 flex */
      align-items: center; /* 수직 가운데 정렬 */
      justify-content: center; /* 가로 가운데 정렬 */
      padding: 0 12px;     /* 좌우 여백 적당히 유지 */
    }
    }
    @media (max-width: 768px) {
    .dropdown-container {
      position: fixed;
      top: 60px;
      left: 50%;
      transform: translateX(-50%);
      width: fit-content;
      max-width: calc(100vw - 20px);
      flex-direction: column;
      flex-wrap: wrap;
      justify-content: center;   
      box-sizing: border-box;
      padding: 10px;
    }
    .api-footer-content {
      justify-content: space-between; /* 좌우 끝 정렬 */
      position: relative; /* footer-contact 절대위치 해제 위해 필요 */
    }
    .api-provide {
      flex: none;
      text-align: left; /* 좌측 정렬 */
    }
    .footer-contact {
      position: static; /* 절대 위치 없애서 겹침 방지 */
      font-size: 0.9rem;
      color: #666;
    }
    }
    @keyframes spin {
     0% { transform: translate(-50%, -50%) rotate(0deg); }
     100% { transform: translate(-50%, -50%) rotate(360deg); }
    }
    .button-group {
      display: flex;
      justify-content: space-between;
      gap: 10px;
      margin-top: 10px;
    }
    .action-button {
      flex: 1 1 0;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      background-color: #f0f0f0;
      color: #333;
      padding: 6px 8px;
      height: 40px;
      text-decoration: none;
      border-radius: 10px;
      font-weight: bold;
      font-size: 14px;
      cursor: pointer;
      border: 1px solid #ccc;
      transition: background-color 0.3s ease;
      white-space: pre-line;
      box-sizing: border-box;
    }
    .action-button:hover {
      background-color: #e0e0e0;
    }
    @media (max-width: 600px) {
    .button-group {
      flex-direction: row;
      flex-wrap: nowrap;    
    }
    .action-button {
    height: auto;
    }
    }

  </style>
</head>
<body>
  <h1 class="site-title">📚 책! 한눈에 </h1>

  <div class="search-container">
    <input id="searchInput" type="text" placeholder="책 제목, 작가, 출판사 입력" />
    <button id="searchButton">검색</button>
  </div>
  <div class="search-container">
    <!-- 기존 검색창 코드 -->
  </div>

  <div class="search-hint">
   관심 도서의 새책 | 전자책 | 중고책 구매정보와, 공공도서관 대여정보를 한번에 확인합니다
  </div>

  <div class="results-wrapper">
    <div class="results">
      <!-- 도서카드들 -->
    </div>
  </div>

  <div id="loadingSpinner" class="spinner" style="display: none;"></div>

  <div class="dropdown-container">
    <select id="regionSelect"><option value="">--지역 선택--</option></select>
    <select id="districtSelect" disabled><option value="">--시군구 선택--</option></select>
    <select id="librarySelect" disabled><option value="">--도서관 선택--</option></select>
    <button id="checkLibraryBtn" disabled>확인</button>
    <button id="closeDropdownBtn">닫기</button>
  </div>

  <div class="results" id="results"></div>
  <button id="loadMoreBtn" style="display:none;">더보기</button>

  <!-- ✅ 모달 구조 추가 -->
  <div id="libraryModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" id="closeModalBtn">&times;</span>
      <div><strong>[책 제목]</strong> <span id="modalBookTitle"></span></div>
      <div id="libraryModalContent">로딩 중...</div>
    </div>
  </div>
  <footer class="api-footer">
  <div class="api-footer-content">
      <div class="api-provide">API제공: 알라딘 | 도서관정보나루</div>
      <div class="footer-contact">jkhong8908@gmail.com</div> 
  </div>
  </footer>
  <button id="backToTop" title="맨 위로 가기">⬆ TOP</button>

<script>
    document.getElementById('searchButton').addEventListener('click', searchBooks);
    document.getElementById('searchInput').addEventListener('keypress', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        searchBooks();
      }
    });
    const resultsContainer = document.getElementById('results');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const dropdownContainer = document.querySelector('.dropdown-container');
    const dropdownRegionSelect = document.getElementById('regionSelect');
    const dropdownDistrictSelect = document.getElementById('districtSelect');
    const dropdownLibrarySelect = document.getElementById('librarySelect');
    const checkLibraryBtn = document.getElementById('checkLibraryBtn');
    const closeDropdownBtn = document.getElementById('closeDropdownBtn');
    const modal = document.getElementById('libraryModal');
    const modalContent = document.getElementById('libraryModalContent');
    const closeModalBtn = document.getElementById('closeModalBtn');

    let libraryData = {};
    let selectedISBN = null;
    let selectedTitle = null;
    let selectedDistrict = null;  // [추가] 시군구명 저장용
    let allBooks = [];
    let displayedCount = 0;
    const PAGE_SIZE = 12;
    buttonLibrary.innerText = '도서관\n대여정보';

    function formatPrice(num) {
      return Number(num).toLocaleString() + '원';
    }
    function extractItemId(url) {
      const match = url.match(/ItemId=(\d+)/);
      return match ? match[1] : '';
    }
    function isMobile() {
      return /Mobi|Android/i.test(navigator.userAgent);
    }
    function createBookCard(book) {
     const priceNew = book.priceStandard ? formatPrice(book.priceStandard) : '정보 없음';
     const priceSale = book.priceSales ? formatPrice(book.priceSales) : '정보 없음';

     const itemId = extractItemId(book.link);

     // 새책/전자책 링크
     const newLinkPC = book.link;
     const newLinkMobile = `https://www.aladin.co.kr/m/mproduct.aspx?ItemId=${itemId}`;
     const newLinkFinal = isMobile() ? newLinkMobile : newLinkPC;

     // 중고책 링크
     const usedLinkPC = `https://www.aladin.co.kr/search/wsearchresult.aspx?SearchTarget=Used&KeyWord=${encodeURIComponent(book.title)}`;
     const usedLinkMobile = `https://www.aladin.co.kr/m/museditemall.aspx?ItemId=${itemId}&TabType=1&Fix=1`;
     const usedLinkFinal = isMobile() ? usedLinkMobile : usedLinkPC;

     const card = document.createElement('div');
     card.className = 'book-card';

     card.innerHTML = `
       <img src="${book.cover}" alt="표지 이미지">
       <div class="book-info">
         <h3>${book.title}</h3>
         <p>저자: ${book.author}</p>
         <p>출판사: ${book.publisher} (${book.pubDate})</p>
         <p class="price">정가: ${priceNew} / 할인가: ${priceSale}</p>
         <div class="button-group">
           <a href="${newLinkFinal}" target="_blank" class="action-button">새책/전자책</a>
           <a href="${usedLinkFinal}" target="_blank" class="action-button">중고책</a>
           <button type="button" class="action-button library-status-link"
                data-isbn="${book.isbn13}" 
                data-title="${book.title}">도서관\n대여정보</button>
         </div>
       </div>
     `;
     return card;
   }

    function renderBooks() {
      const toShow = allBooks.slice(displayedCount, displayedCount + PAGE_SIZE);
      toShow.forEach(book => {
        resultsContainer.appendChild(createBookCard(book));
      });
      displayedCount += toShow.length;

      if (displayedCount < allBooks.length) {
        loadMoreBtn.style.display = 'block';
        loadMoreBtn.disabled = false;
      } else {
        loadMoreBtn.style.display = 'none';
      }

      document.querySelectorAll('.library-status-link').forEach(link => {
        link.removeEventListener('click', onLibraryStatusClick);
        link.addEventListener('click', onLibraryStatusClick);
      });
    }

    function onLibraryStatusClick(e) {
      e.preventDefault();
      selectedISBN = e.target.dataset.isbn;
      selectedTitle = e.target.dataset.title;
      console.log('선택된 ISBN:', selectedISBN);
      console.log('선택된 도서명:', selectedTitle);
      dropdownContainer.style.display = 'flex';
    }

    function searchBooks() {
      const query = document.getElementById('searchInput').value.trim();
      if (!query) return alert('검색어를 입력하세요.');

      dropdownContainer.style.display = 'none';
      selectedISBN = null;
      resultsContainer.innerHTML = '';
      loadMoreBtn.style.display = 'none';
      displayedCount = 0;
      allBooks = [];

      document.getElementById('loadingSpinner').style.display = 'block';

    fetch(`/search?query=${encodeURIComponent(query)}`)
    .then(res => res.json())
    .then(data => {
      if (!data.item || data.item.length === 0) {
        resultsContainer.innerHTML = '<p>검색 결과가 없습니다.</p>';
      } else {
        allBooks = data.item;
        renderBooks();
      }
    })
    .finally(() => {
      // ✅ API 요청 끝났으니 스피너 숨김
      document.getElementById('loadingSpinner').style.display = 'none';
    });
}  

    loadMoreBtn.addEventListener('click', renderBooks);

    fetch('/libraries')
      .then(res => res.json())
      .then(data => {
        libraryData = data;
        data.regions.forEach(region => {
          const opt = document.createElement('option');
          opt.value = region;
          opt.textContent = region;
          dropdownRegionSelect.appendChild(opt);
        });
      });

    dropdownRegionSelect.addEventListener('change', () => {
      const region = dropdownRegionSelect.value;      
      
      dropdownDistrictSelect.innerHTML = '<option value="">--시군구 선택--</option>';
      dropdownLibrarySelect.innerHTML = '<option value="">--도서관 선택--</option>';
      dropdownDistrictSelect.disabled = true;
      dropdownLibrarySelect.disabled = true;
      checkLibraryBtn.disabled = true;

      selectedDistrict = null;  

      if (!region || !libraryData.districtsByRegion[region]) return;
      
      libraryData.districtsByRegion[region].forEach(district => {
        const opt = document.createElement('option');
        opt.value = district;
        opt.textContent = district;
        dropdownDistrictSelect.appendChild(opt);
      });

      dropdownDistrictSelect.disabled = false;
    });

        
    dropdownDistrictSelect.addEventListener('change', () => {
      const district = dropdownDistrictSelect.value;
      const region = dropdownRegionSelect.value;

      dropdownLibrarySelect.innerHTML = '<option value="">--도서관 선택--</option>';
      dropdownLibrarySelect.disabled = true;
      checkLibraryBtn.disabled = true;

      selectedDistrict = district;  // [추가] 시군구 선택 저장

      const key = `${region.trim()}|${district.trim()}`;
      if (!district || !libraryData.librariesByDistrict[key]) return;

      updateLibrarySelect(district);
    });

    dropdownLibrarySelect.addEventListener('change', () => {
      checkLibraryBtn.disabled = !dropdownLibrarySelect.value;
    });

    checkLibraryBtn.addEventListener('click', () => {
      const libCode = dropdownLibrarySelect.value;
      console.log('확인 버튼 클릭 - 선택된 ISBN:', selectedISBN);
      console.log('선택된 도서관 코드:', libCode);

      if (!selectedISBN || !libCode) {
        console.log('ISBN 또는 도서관 코드가 없습니다. 요청을 중단합니다.');
        return;
      }

      const selectedLibraryName = dropdownLibrarySelect.selectedOptions[0].textContent;

      // [변경] 모달 첫 줄 - [책 제목] 선택된 책 제목 형태로 표현
      // modalContent.innerHTML 대체 전에 아래 span에 책 제목 세팅 (span은 HTML에 있어야 함)
      document.getElementById('modalBookTitle').textContent = selectedTitle || '';
      document.getElementById('loadingSpinner').style.display = 'block';

      fetch(`/check_library?isbn=${selectedISBN}&libraryCode=${libCode}`)
        .then(res => res.json())
        .then(data => {
          console.log('서버 응답 데이터:', data);
          // [변경] 출력 형식 변경 및 시군구명 추가, '여기' 링크 삽입
          let html = `
            <p><strong>[${selectedLibraryName}]</strong><br>
            소장 여부: <strong>${data.results[0].hasBook ? '소장중' : '미소장'}</strong><br>
            대출 가능 여부: <strong>${data.results[0].loanAvailable ? '가능' : '불가능'}</strong></p>
            <p style="font-size: 13px; color: #777; margin-top: 10px;">
              ※ 대출현황은 조회일 기준, 하루 전 상황이며, 실시간 현황은 해당 도서관에 문의 바랍니다.
            </p>
            
          `;

          modalContent.innerHTML = html;
          modal.style.display = 'block';

        })
        .catch(err => {
          console.error('요청 실패:', err);
          modalContent.innerHTML = `<p style="color:red;">요청 실패: ${err}</p>`;
          modal.style.display = 'block';
        })
        .finally(() => {
         // ✅ API 요청 끝났으니 스피너 숨김
         document.getElementById('loadingSpinner').style.display = 'none';  
        });
    });

    closeDropdownBtn.addEventListener('click', () => {
      dropdownContainer.style.display = 'none';
      dropdownRegionSelect.selectedIndex = 0;
      dropdownDistrictSelect.innerHTML = '<option value="">--시군구 선택--</option>';
      dropdownLibrarySelect.innerHTML = '<option value="">--도서관 선택--</option>';
      dropdownDistrictSelect.disabled = true;
      dropdownLibrarySelect.disabled = true;
      checkLibraryBtn.disabled = true;
      selectedDistrict = null;  // [추가] 시군구 초기화
    });

    closeModalBtn.addEventListener('click', () => {
      modal.style.display = 'none';
    });

    window.addEventListener('click', function (e) {
      if (e.target === modal) modal.style.display = 'none';
    });

    function updateLibrarySelect(district) {
      const librarySelect = document.getElementById('librarySelect');
      librarySelect.innerHTML = '<option value="">--도서관 선택--</option>';

      const selectedRegion = dropdownRegionSelect.value.trim();
      const trimmedDistrict = district.trim();  // 혹시 공백 있을까 봐
      const key = `${selectedRegion}|${trimmedDistrict}`;
      console.log('📌 사용 중인 key:', key);
      console.log('📚 전체 keys:', Object.keys(libraryData.librariesByDistrict));

      const libraries = libraryData.librariesByDistrict[key] || [];
      
      libraries.forEach((library) => {
        const option = document.createElement('option');
        option.value = library.libraryCode;
        option.textContent = library.libraryName;
        librarySelect.appendChild(option);
      });

      librarySelect.disabled = libraries.length === 0;
    }

// 스크롤 이벤트 감지
  window.onscroll = function() {scrollFunction()};

  function scrollFunction() {
    const backToTopButton = document.getElementById("backToTop");
    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
      backToTopButton.style.display = "block";
    } else {
      backToTopButton.style.display = "none";
    }
  }

  // 클릭 시 상단으로 이동
  document.getElementById("backToTop").addEventListener("click", function() {
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  });
  </script>  


</body>
</html>
